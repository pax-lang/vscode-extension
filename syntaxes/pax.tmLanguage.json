{
    "fileTypes": [
        "pax"
    ],
    "name": "PAX",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#control_flow"
        },
        {
            "include": "#tags"
        },
        {
            "include": "#settings"
        },
        {
            "include": "#handlers"
        }
    ],
    "repository": {
        "comments": {
            "applyEndPatternLast": true,
            "patterns": [
                {
                    "name": "comment.line.pax",
                    "match": "//.*"
                },
                {
                    "name": "comment.block.pax",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "identifier": {
            "name": "variable.pax",
            "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)"
        },
        "tags": {
            "name": "meta.tag.pax",
            "patterns":[
                {"include": "#open_self_tag"},
                {"include": "#close_tag"}
            ]
        },
        "open_self_tag": {
            "name": "meta.tag.pax",
            "begin": "(<([A-Z][a-zA-Z0-9_]*))",
            "beginCaptures": {
                "1": {
                    "name": "support.class.pax"
                }
            },
            "end": "/>|>",
            "endCaptures": {
                "0": {
                    "name": "support.class.pax"
                }
            },
            "patterns": [
                {
                    "include": "#attributeKeys"
                },
                {
                    "include": "#attributeValues"
                }
            ]
        },
        "close_tag": {
            "name": "support.class.pax",
            "match": "</[A-Z][a-zA-Z0-9_]*>"
        },
        "attributeKeys": {
            "patterns": [
                {
                    "include": "#identifier",
                    "match": "\\s*="
                }
            ]
        },
        "attributeValues": {
            "patterns": [
                {
                    "include": "#literal_object"
                },
                {
                    "include": "#expression"
                },
                {
                    "include": "#literal_value"
                },
                {
                    "include": "#identifier"
                }
            ]
        },
        "expression": {
            "name": "variable.parameter",
            "begin": "{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.section.braces.begin.pax"
                }
            },
            "end": "}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.section.braces.end.pax"
                }
            },
            "patterns": [
                {
                    "include": "#expression_body"
                }
            ]
        },
        "expression_body":{
            "patterns": [
                {
                    "include": "#literal_object"
                },
                {
                    "include": "#xo-range"
                },
                {
                    "include": "#xo-prefix"
                },
                {
                    "include": "#xo-infix"
                },
                {
                    "include": "#xo-list"
                },
                {
                    "include": "#literal_value"
                },
                {
                    "include": "#xo-symbol"
                }
            ]
        },
        "xo-function-call": {
            "name": "comment.function.call",
            "match": "[A-Za-z_][A-Za-z0-9_]*(::[A-Za-z_][A-Za-z0-9_]*)?\\(",
            "patterns":[
                {
                    "include": "#expression_body"
                }
            ]
        },          
        "xo-range": {
            "match": "(\\d+)\\.{2}(\\d+)",
            "captures":{
                "1":{
                    "patterns":[
                        {"include": "#literal_value"}
                    ]
                },
                "2":{
                    "patterns":[
                        {"include": "#literal_value"}
                    ]
                }
            },
            "name": "keyword.list.pax"
        },
        "xo-prefix": {
            "match": "\\b(?:-|!)\\b",
            "name": "keyword.operator.prefix.pax"
        },
        "xo-infix": {
            "match": "\\+|&&|\\|\\||\\/|\\^|%%|\\*|==|>|>=|<|<=|!=|-|\\?|:",
            "name": "keyword.infix.pax"
        },
        "xo-symbol": {
            "name": "variable.symbol.pax",
            "match": "\\b\\$?[A-Za-z_][A-Za-z0-9_]*(\\.[A-Za-z_][A-Za-z0-9_]*)?\\b",
            "captures": {
                "0": {
                    "name": "variable.symbol.pax",
                    "patterns":[
                        {"include": "#expression_body"}
                    ]
                }
            }
        },
        "xo-list": {
            "begin": "\\[",
            "end": "\\]",
            "contentName": "markup.list.pax",
            "patterns": [
                { "include": "#expression_body" }
            ]
        },
        "literal_value": {
            "patterns": [
                {
                    "include": "#literal_number_with_unit"
                },
                {
                    "include": "#literal_number"
                },
                {
                    "include": "#literal_tuple"
                },
                {
                    "include": "#literal_enum_value"
                },
                {
                    "include": "#literal_boolean"
                },
                {
                    "include": "#string"
                }
            ]
        },
        "literal_number_with_unit": {
            "name": "constant.numeric.pax",
            "match": "\\b\\d+(%|px|deg|rad)"
        },
        "literal_number": {
            "name": "constant.numeric.pax",
            "match": "\\b\\d+(\\.\\d+)?\\b"
        },
        "literal_tuple": {
            "begin": "\\(",
            "end": "\\)",
            "patterns": [
                {
                    "include": "#xo-infix"
                },
                {
                    "include": "#literal_value"
                },
                {
                    "name": "punctuation.separator.comma.pax",
                    "match": ","
                }
            ]
        },
        "literal_enum_value": {
            "name": "entity.name.function",
            "match": "\\b[A-Z][a-zA-Z0-9_]*::[a-zA-Z0-9_]*(\\([a-zA-Z0-9_,]*\\))?"
        },
        "literal_boolean": {
            "name": "constant.language.boolean.pax",
            "match": "\\b(true|false)\\b"
        },
        "string": {
            "name": "string.quoted.double.pax",
            "begin": "\"",
            "end": "\""
        },
        "settings": {
            "name": "keyword.settings.pax",
            "begin": "@settings\\s*\\{",
            "end": "\\}",
            "patterns": [
                {
                    "include": "#comments"
                },
                {
                    "include": "#selector_block"
                }
            ]
        },
        "selector_block": {
            "patterns": [
                {
                    "include": "#selector"
                },
                {
                    "include": "#literal_object"
                }
            ]
        },
        "selector": {
            "name": "variable.selector.pax",
            "match": "([.#])([a-zA-Z0-9_]+)"
        },
        "literal_object": {
            "name": "variable.literal_object.pax",
            "begin": "\\{",
            "end": "\\}",
            "patterns": [
                {
                    "include": "#settings_key_value_pair"
                }
            ]
        },
        "settings_key_value_pair": {
            "patterns": [
                {
                    "include": "#settings_key"
                },
                {
                    "include": "#settings_value"
                }
            ]
        },
        "settings_key": {
            "include": "#identifier",
            "match": "\\s*:\\b"
        },
        "settings_value": {
            "patterns": [
                {
                    "include": "#literal_value"
                },
                {
                    "include": "#literal_object"
                },
                {
                    "include": "#expression"
                }
            ]
        },
        "handlers": {
            "name": "keyword.handlers.pax",
            "begin": "@handlers\\s*\\{",
            "end": "\\}",
            "patterns": [
                {
                    "include": "#comments"
                },
                {
                    "include": "#handlers_key_value_pair"
                }
            ]
        },
        "handlers_key_value_pair": {
            "patterns": [
                {
                    "include": "#handlers_key"
                },
                {
                    "include": "#handlers_value"
                }
            ]
        },
        "handlers_key": {
            "include": "#identifier",
            "match": "\\s*:"
        },
        "handlers_value": {
            "patterns": [
                {
                    "include": "#literal_function"
                },
                {
                    "include": "#function_list"
                }
            ]
        },
        "literal_function": {
            "name": "entity.name.function.pax",
            "match": "\\b(self\\.)?([a-zA-Z_][a-zA-Z0-9_]*),?"
        },
        "function_list": {
            "name": "meta.function-list.pax",
            "begin": "\\[",
            "end": "\\]",
            "patterns": [
                {
                    "include": "#literal_function"
                }
            ]
        },
        "control_flow": {
            "name": "entity.name.section.control.pax",
            "patterns": [
                {"include": "#statement_for"},
                {"include": "#statement_if"},
                {"include": "#statement_slot"},
                {"include": "#closing_brace"}
            ]
        },
        "closing_brace": {
            "name": "keyword.control.brace.end.pax",
            "match": "}"
        },        
        "statement_if": {
            "name": "keyword.control.if.pax",
            "begin": "if",
            "end": "{",
            "patterns": [
                {"include": "#expression"}
            ]
        },
        "statement_for": {
            "name": "meta.control.for.pax",
            "begin": "for",
            "beginCaptures":{
                "0": {
                    "name": "keyword.control.for.pax"
                }
            },
            "end": "{",
            "endCaptures":{
                "0": {
                    "name": "keyword.control.for.pax"
                }
            },
            "patterns": [
                {"name": "keyword.control.in.pax", "match": "in"},
                {"include": "#xo-range"},
                {"include": "#identifier"}
            ]
        },
        "statement_slot": {
            "name": "keyword.control.slot.pax",
            "match": "slot"
        }
    },
    "scopeName": "source.pax"
}